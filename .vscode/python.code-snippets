{
    "Controller Template": {
        "prefix": "controller",
        "body": [
            "from Control.Abstract.Controller import Controller",
            "",
            "import numpy as np",
            "import json",
            "",
            "from Lib.Utils.DataLogger import DataLogger",
            "from Lib.Utils.GraphPlotter import GraphPlotter",
            "from DebugDataLogger import DebugDataLogger",
            "",
            "class $1(Controller):",
            "    \"\"\"",
            "    PID controller class",
            "",
            "    Constructor:",
            "        $1(controllerParam)",
            "",
            "    Methods:",
            "        See Controller class",
            "    \"\"\"",
            "",
            "    class Param(Controller.Param):",
            "        \"\"\"",
            "        Parameters of PID controller",
            "        \"\"\"",
            "        def __init__(self, $2) -> None:",
            "            \"\"\"",
            "            constructor",
            "",
            "            Args:",
            "",
            "            \"\"\"",
            "",
            "        def __str__(self) -> str:",
            "            return json.dumps({",
            "                \"$1\": {",
            "                    \"K\": self.K,",
            "                }})",
            "",
            "    def __init__(self, controllerParam: Param) -> None:",
            "        \"\"\"",
            "        constructor",
            "",
            "        Args:",
            "            controllerParam (Param): controller parameters",
            "        \"\"\"",
            "        super().__init__(controllerParam)",
            "",
            "    # private ------------------------------------------------------",
            "    def ComputeControlInputImpl(self, refState: np.ndarray, curState: np.ndarray, prevSatInput: np.ndarray, dt: float, param: Param) -> np.ndarray:",
            "        \"\"\"",
            "        Compute control input",
            "",
            "        Args:",
            "            refState (np.ndarray): reference state",
            "            curState (np.ndarray): current sensing state",
            "            prevSatInput (np.ndarray): previous saturated input",
            "            dt (float): time step",
            "            param (Param):  controller parameters",
            "",
            "        Returns:",
            "            np.ndarray: control input",
            "        \"\"\"",
            "        controlInput = 0",
            "        return np.array([controlInput])",
            "",
            "    def PushStateToLoggerImpl(self, refState: np.ndarray, curState: np.ndarray, dataLogger: DataLogger) -> None:",
            "        \"\"\"",
            "        Push the state to the logger",
            "",
            "        Args:",
            "            refState (np.ndarray): reference state",
            "            curState (np.ndarray): current sensing state",
            "            dataLogger (DataLogger): data logger",
            "        \"\"\"",
            "        dataLogger.PushData(refState[0], \"Ref\")",
            "        dataLogger.PushData(refState[0] - curState[0], \"Error\")",
            "",
            "    def PushStateForPlotImpl(self, refState: np.ndarray, curState: np.ndarray, graphPlotter: GraphPlotter) -> None:",
            "        \"\"\"",
            "        Push the state to the plotter",
            "",
            "        Args:",
            "            refState (np.ndarray): reference state",
            "            curState (np.ndarray): current sensing state",
            "            graphPlotter (GraphPlotter): graph plotter",
            "        \"\"\"",
            "        graphPlotter.PushPlotYData(refState[0], \"Ref\", \"Ref\")",
            "        graphPlotter.PushPlotYData(refState[0] - curState[0], \"Error\", \"Error\")",
            ""
        ],
        "description": "Controller Template"
    },
    "Plant Template":{
        "prefix": "plant",
        "body": [
            "from Control.Abstract.Plant import Plant",
            "",
            "import numpy as np",
            "import json",
            "",
            "from Lib.Compensator.StateSpace import StateSpace",
            "from Lib.Utils.DataLogger import DataLogger",
            "from Lib.Utils.GraphPlotter import GraphPlotter",
            "from DebugDataLogger import DebugDataLogger",
            "",
            "class $1(Plant):",
            "    \"\"\"",
            "    Plant class",
            "",
            "    Constructor:",
            "        $1(plantParam, solverType, initialState)",
            "",
            "    Methods:",
            "        See Plant class",
            "    \"\"\"",
            "",
            "    class Param(Plant.Param):",
            "        \"\"\"",
            "        Parameters of plant",
            "        \"\"\"",
            "        def __init__(self, $2) -> None:",
            "            \"\"\"",
            "            constructor",
            "",
            "            Args:",
            "",
            "            \"\"\"",
            "",
            "        def __str__(self) -> str:",
            "            return json.dumps({",
            "                \"$1\": {",
            "                    \"K\": self.K,",
            "                }})",
            "",
            "    def __init__(self, plantParam: Param, solverType = StateSpace.SolverType.RUNGE_KUTTA, initialState = None) -> None:",
            "        \"\"\"",
            "        constructor",
            "",
            "        Args:",
            "            plantParam (Param): plant parameters",
            "            solverType (StateSpace.SolverType, optional): ODE solver type",
            "            initialState (np.ndarray, optional): initial state",
            "        \"\"\"",
            "        stateOrder = ",
            "        super().__init__(stateOrder, plantParam, solverType, initialState)",
            "",
            "    # private ------------------------------------------------------",
            "    def StateEquation(self, curState: np.ndarray, curInput: np.ndarray, param: Param) -> np.ndarray:",
            "        \"\"\"",
            "        State equation of the plant",
            "",
            "        Args:",
            "            curState (np.ndarray): current state",
            "            curInput (np.ndarray): current input",
            "            param (Param): plant parameters",
            "",
            "        Returns:",
            "            np.ndarray: derivative of the state",
            "        \"\"\"",
            "        diffState = np.zeros_like(curState)",
            "        return diffState",
            "",
            "    def OutputEquation(self, curState: np.ndarray, curInput: np.ndarray, param: Param) -> np.ndarray:",
            "        \"\"\"",
            "        Output equation of the plant",
            "",
            "        Args:",
            "            curState (np.ndarray): current state",
            "            curInput (np.ndarray): current input",
            "            param (Param): plant parameters",
            "",
            "        Returns:",
            "            np.ndarray: output of the plant",
            "        \"\"\"",
            "        output = curState[0]",
            "        return np.array([output])",
            "",
            "    def GetSaturatedInputImpl(self, controlInput: np.ndarray, param: Param) -> np.ndarray:",
            "        \"\"\"",
            "        Get saturated control input",
            "",
            "        Args:",
            "            controlInput (np.ndarray): control input",
            "            param (Param): plant parameters",
            "",
            "        Returns:",
            "            np.ndarray: saturated input",
            "        \"\"\"",
            "        return controlInput",
            "",
            "    def PushStateToLoggerImpl(self, curInput: np.ndarray, dataLogger: DataLogger) -> None:",
            "        \"\"\"",
            "        Push the state to the logger",
            "",
            "        Args:",
            "            curInput (np.ndarray): current input",
            "            dataLogger (DataLogger): data logger",
            "        \"\"\"",
            "        dataLogger.PushData(self.stateVariable_[0], \"State\")",
            "        dataLogger.PushData(curInput[0], \"Input\")",
            "",
            "    def PushStateForPlotImpl(self, curInput: np.ndarray, graphPlotter: GraphPlotter) -> None:",
            "        \"\"\"",
            "        Push the state to the plotter",
            "",
            "        Args:",
            "            curInput (np.ndarray): current input",
            "            graphPlotter (GraphPlotter): graph plotter",
            "        \"\"\"",
            "        graphPlotter.PushPlotYData(self.stateVariable_[0], \"State\", \"State\")",
            "        graphPlotter.PushPlotYData(curInput[0], \"Input\", \"Input\")",
            ""
        ],
        "description": "Plant Template"
    },
    "SignalGenerator Template":{
        "prefix": "signalGenerator",
        "body": [
            "from Lib.SignalGenerator.SignalGenerator import SignalGenerator",
            "",
            "import numpy as np",
            "import json",
            "",
            "class $1(SignalGenerator):",
            "    \"\"\"",
            "    Signal generator class",
            "",
            "    Constructor:",
            "        $1(param)",
            "",
            "    Methods:",
            "        GenerateSignal: Generate signal",
            "            signal = GenerateSignal(k, dt)",
            "    \"\"\"",
            "",
            "    class Param(SignalGenerator.Param):",
            "        \"\"\"",
            "        Parameters of signal generator",
            "        \"\"\"",
            "        def __init__(self, $2) -> None:",
            "            \"\"\"",
            "            constructor",
            "",
            "            Args:",
            "",
            "            \"\"\"",
            "",
            "        def __str__(self) -> str:",
            "            return json.dumps({",
            "                \"$1\": {",
            "                    \"K\": self.K,",
            "                }})",
            "",
            "    def __init__(self, param: Param) -> None:",
            "        \"\"\"",
            "        constructor",
            "",
            "        Args:",
            "            signalGeneratorParam (Param): signal generator parameters",
            "        \"\"\"",
            "        super().__init__(param)",
            "",
            "    # private ------------------------------------------------------",
            "    def GenerateSignalImpl(self, k: int, dt: float, param: Param) -> float:",
            "        \"\"\"",
            "        Generate signal",
            "",
            "        Args:",
            "            k (int): current discreat time",
            "            dt (float): time step",
            "            param (Param): signal generator parameters",
            "",
            "        Returns:",
            "            np.ndarray: signal",
            "        \"\"\"",
            "        signal = 0",
            "        return signal",
        ],
    },
    "Creator Template":{
        "prefix": "creator",
        "body": [
            "from Control.Abstract.Plant import Plant",
            "from Control.Abstract.Controller import Controller",
            "",
            "def CreatePlant() -> Plant:",
            "    \"\"\"",
            "    Create plant",
            "",
            "    Returns:",
            "        Plant: plant",
            "    \"\"\"",
            "    return Plant()",
            "",
            "def CreateController() -> Controller:",
            "    \"\"\"",
            "    Create controller",
            "",
            "    Returns:",
            "        Controller: controller",
            "    \"\"\"",
            "    return Controller()",
            "",
            "def GetParameter() -> Parameter:",
            "    \"\"\"",
            "    Get parameter",
            "",
            "    Returns:",
            "        Parameter: parameter",
            "    \"\"\"",
            "    return Parameter()",
        ],
    },
    "Parameter Template":{
        "prefix": "parameter",
        "body": [
            "import numpy as np",
            "import json",
            "",
            "from Lib.Compensator.StateSpace import StateSpace",
            "from Lib.SignalGenerator.ImpulseGenerator import ImpulseGenerator",
            "from Lib.SignalGenerator.StepGenerator import StepGenerator",
            "from Lib.SignalGenerator.SinGenerator import SinGenerator",
            "from Lib.SignalGenerator.SweepSinGenerator import SweepSinGenerator",
            "from Lib.SignalGenerator.MSequenceGenerator import MSequenceGenerator",
            "",
            "class Parameter:",
            "    dt = ",
            "    stopTime = ",
            "",
            "    solverType = StateSpace.SolverType.RUNGE_KUTTA",
            "    initialState = np.array([0.0])",
            "",
            "    referenceGenerators = [",
            "        .Param(",
            "",
            "        ),",
            "    ]",
            "",
            "    disturbanceGenerators = [",
            "        .Param(",
            "",
            "        ),",
            "    ]",
            "",
            "    @staticmethod",
            "    def SaveToFile(fileName: str) -> None:",
            "        \"\"\"",
            "        Save parameter to file",
            "",
            "        Args:",
            "            fileName (str): file name",
            "        \"\"\"",
            "        jsonStr = json.dumps({",
            "            \"Parameter\": {",
            "                \"dt\": Parameter.dt,",
            "                \"stopTime\": Parameter.stopTime,",
            "                \"solverType\": Parameter.solverType.name,",
            "                \"initialState\": Parameter.initialState.tolist(),",
            "                \"\": ",
            "            }",
            "        }, indent=4)",
            "",
            "        with open(fileName, \"w\") as f:",
            "            f.write(jsonStr)",
            "",
        ],
    }
}