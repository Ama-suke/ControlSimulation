{
    "Controller Template": {
        "prefix": "controller",
        "body": [
            "from Control.Abstract.Controller import Controller",
            "",
            "import numpy as np",
            "import json",
            "",
            "from Lib.Utils.DataLogger import DataLogger",
            "from DebugDataLogger import DebugDataLogger",
            "",
            "class $1(Controller):",
            "    \"\"\"",
            "    PID controller class",
            "",
            "    Constructor:",
            "        $1(controllerParam)",
            "",
            "    Methods:",
            "        ComputeControlInput: Compute control input",
            "            controlInput = ComputeControlInput(refState, curState, prevSatInput, dt)",
            "    \"\"\"",
            "",
            "    class Param(Controller.Param):",
            "        \"\"\"",
            "        Parameters of PID controller",
            "        \"\"\"",
            "        def __init__(self, $2) -> None:",
            "            \"\"\"",
            "            constructor",
            "",
            "            Args:",
            "",
            "            \"\"\"",
            "",
            "        def __str__(self) -> str:",
            "            return json.dumps({",
            "                \"$1\": {",
            "                    \"K\": self.K,",
            "                }})",
            "",
            "    def __init__(self, controllerParam: Param) -> None:",
            "        \"\"\"",
            "        constructor",
            "",
            "        Args:",
            "            controllerParam (Param): controller parameters",
            "        \"\"\"",
            "        super().__init__(controllerParam)",
            "",
            "    # private ------------------------------------------------------",
            "    def ComputeControlInputImpl(self, refState: np.ndarray, curState: np.ndarray, prevSatInput: np.ndarray, dt: float, param: Param) -> np.ndarray:",
            "        \"\"\"",
            "        Compute control input",
            "",
            "        Args:",
            "            refState (np.ndarray): reference state",
            "            curState (np.ndarray): current state",
            "            prevSatInput (np.ndarray): previous saturated input",
            "            dt (float): time step",
            "            param (Param):  controller parameters",
            "",
            "        Returns:",
            "            np.ndarray: control input",
            "        \"\"\"",
            "        controlInput = 0",
            "        return np.array([controlInput])",
            "",
            "    def PushStateToLoggerImpl(self, refState: np.ndarray, curState: np.ndarray, dataLogger: DataLogger) -> None:",
            "        \"\"\"",
            "        Push the state to the logger",
            "",
            "        Args:",
            "            refState (np.ndarray): reference state",
            "            curState (np.ndarray): current state",
            "            dataLogger (DataLogger): data logger",
            "        \"\"\"",
            "        dataLogger.PushData(refState[0], \"Ref\")",
            "        dataLogger.PushData(refState[1] - curState[0], \"Error\")",
        ],
        "description": "Controller Template"
    },
    "Plant Template":{
        "prefix": "plant",
        "body": [
            "from Plant.Abstract.Plant import Plant",
            "",
            "import numpy as np",
            "import json",
            "",
            "from Lib.Utils.DataLogger import DataLogger",
            "from DebugDataLogger import DebugDataLogger",
            "",
            "class $1(Plant):",
            "    \"\"\"",
            "    Plant class",
            "",
            "    Constructor:",
            "        $1(plantParam)",
            "",
            "    Methods:",
            "        UpdateState: Update state",
            "            newState = UpdateState(controlInput, dt)",
            "    \"\"\"",
            "",
            "    class Param(Plant.Param):",
            "        \"\"\"",
            "        Parameters of plant",
            "        \"\"\"",
            "        def __init__(self, $2) -> None:",
            "            \"\"\"",
            "            constructor",
            "",
            "            Args:",
            "",
            "            \"\"\"",
            "",
            "        def __str__(self) -> str:",
            "            return json.dumps({",
            "                \"$1\": {",
            "                    \"K\": self.K,",
            "                }})",
            "",
            "    def __init__(self, plantParam: Param) -> None:",
            "        \"\"\"",
            "        constructor",
            "",
            "        Args:",
            "            plantParam (Param): plant parameters",
            "        \"\"\"",
            "        super().__init__(plantParam)",
            "",
            "    # private ------------------------------------------------------",
            "    def UpdateStateImpl(self, controlInput: np.ndarray, dt: float, param: Param) -> np.ndarray:",
            "        \"\"\"",
            "        Update state",
            "",
            "        Args:",
            "            controlInput (np.ndarray): control input",
            "            dt (float): time step",
            "            param (Param): plant parameters",
            "",
            "        Returns:",
            "            np.ndarray: new state",
            "        \"\"\"",
            "        newState = 0",
            "        return np.array([newState])",
            "",
            "    def PushStateToLoggerImpl(self, curState: np.ndarray, dataLogger: DataLogger) -> None:",
            "        \"\"\"",
            "        Push the state to the logger",
            "",
            "        Args:",
            "            curState (np.ndarray): current state",
            "            dataLogger (DataLogger): data logger",
            "        \"\"\"",
            "        dataLogger.PushData(curState[0], \"State\")",
        ],
        "description": "Plant Template"
    },
    "SignalGenerator Template":{
        "prefix": "signalGenerator",
        "body": [
            "from Lib.SignalGenerator.SignalGenerator import SignalGenerator",
            "",
            "import numpy as np",
            "import json",
            "",
            "class $1(SignalGenerator):",
            "    \"\"\"",
            "    Signal generator class",
            "",
            "    Constructor:",
            "        $1(param)",
            "",
            "    Methods:",
            "        GenerateSignal: Generate signal",
            "            signal = GenerateSignal(k, dt)",
            "    \"\"\"",
            "",
            "    class Param(SignalGenerator.Param):",
            "        \"\"\"",
            "        Parameters of signal generator",
            "        \"\"\"",
            "        def __init__(self, $2) -> None:",
            "            \"\"\"",
            "            constructor",
            "",
            "            Args:",
            "",
            "            \"\"\"",
            "",
            "        def __str__(self) -> str:",
            "            return json.dumps({",
            "                \"$1\": {",
            "                    \"K\": self.K,",
            "                }})",
            "",
            "    def __init__(self, param: Param) -> None:",
            "        \"\"\"",
            "        constructor",
            "",
            "        Args:",
            "            signalGeneratorParam (Param): signal generator parameters",
            "        \"\"\"",
            "        super().__init__(param)",
            "",
            "    # private ------------------------------------------------------",
            "    def GenerateSignalImpl(self, k: int, dt: float, param: Param) -> float:",
            "        \"\"\"",
            "        Generate signal",
            "",
            "        Args:",
            "            k (int): current discreat time",
            "            dt (float): time step",
            "            param (Param): signal generator parameters",
            "",
            "        Returns:",
            "            np.ndarray: signal",
            "        \"\"\"",
            "        signal = 0",
            "        return signal",
        ],
    }
}